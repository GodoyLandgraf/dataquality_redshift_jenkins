pipeline {
    agent any

    environment {
        // Define environment variables
        AWS_DEFAULT_REGION = 'us-east-1'
        USERNAME = credentials('redshift_username')
        PASSWORD = credentials('redshift_password')
        HOST = credentials('host')
        ROLE_ARN = credentials('role_arn')
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github', url: 'https://github.com/GodoyLandgraf/dataquality_test.git'
                checkout scm
            }
        }

        stage('AWS Configure') {
            steps {
                withCredentials([
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-key',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'                    
                    ]
                ]) {
                    script {
                        sh 'aws configure set region ${AWS_DEFAULT_REGION}'
                    }
                }
            }
        }
        stage('Check Connective SODA') {
            steps {
                script {
                    echo "Test Connection:"
                    sh 'soda test-connection -d redshift_datasource -c configuration.yml'
                    }
                }
            }
        stage('SODA Scan Checks Product 1') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo "Running soda scan:"
                        sh "soda scan -d soda -c configuration.yml checks_table2.yml | tee ${WORKSPACE}/checks_redshift_table2_${BUILD_ID} 2>&1"
                        echo "Soda scan completed"
                    }
                }
            }
        }

        stage('SODA Scan Checks Product 2') {
            steps {
                script {
                    echo "Test Connection:"
                    sh 'soda test-connection -d redshift_datasource -c configuration.yml'
                    def sodaScanOutput = null
                    echo "Running soda scan:"
                    try {
                        sodaScanOutput = sh(script: 'soda scan -d redshift_datasource -c configuration.yml checks_table1.yml', returnStdout: true).trim()
                        // Debugging messages
                        echo "Soda Scan Output:"
                        echo sodaScanOutput
                        echo "Soda scan completed"
                        writeFile file: "${WORKSPACE}/checks_redshift_table1_${BUILD_ID}", text: sodaScanOutput
                        echo "Soda Scan Success"
                    } catch (Exception e) {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            writeFile file: "${WORKSPACE}/checks_redshift_table1_${BUILD_ID}", text: sodaScanOutput
                            error("Soda scan failed") // This will mark the stage as failed
                        }
                    }
                }
            }
        }

        stage('Save Outputs into AWS') {
            steps {
                script {
                    try {
                        // Upload the result to S3
                        sh "aws s3 cp ${WORKSPACE}/checks_redshift_table1_${BUILD_ID} s3://athena-soda-storage/jenkins-storage/"
                        sh "aws s3 cp ${WORKSPACE}/checks_redshift_table2_${BUILD_ID}{BUILD_ID} s3://athena-soda-storage/jenkins-storage/"
                    } catch (Exception e) {
                        // Handle the exception, you can customize this block based on your needs
                        echo "Error uploading to S3: ${e.message}"
                        error("Failed to upload to S3. Marking the build as FAILURE.")
                    }
                }
            }
        }
    }
}
